// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/client"
  binaryTargets   = ["native", "darwin-arm64", "rhel-openssl-1.0.x"]
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  firstName String?
  lastName  String?
  hash      String?

  ghost    Boolean   @default(true)
  banned   Boolean   @default(false)
  lastSent DateTime?

  session Session[]

  role    RoleAssignment[]
  manager Manager[]
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  started Boolean @default(false)
  revoked Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Venue {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  show Show[]
}

model Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  production Production[]
}

model Production {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  show Show[]

  manager Manager[]

  companyId String
  Company   Company @relation(fields: [companyId], references: [id])
}

model Manager {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productionId String
  Production   Production @relation(fields: [productionId], references: [id])

  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model Show {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  productionId String
  Production   Production @relation(fields: [productionId], references: [id])

  venueId String
  Venue   Venue  @relation(fields: [venueId], references: [id])
}

model Role {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  role RoleAssignment[]

  roleGroupsId String?
  RoleGroups   RoleGroups? @relation(fields: [roleGroupsId], references: [id])
}

model RoleGroups {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  role Role[]
}

model RoleAssignment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId String
  Role   Role   @relation(fields: [roleId], references: [id])

  userId String
  User   User   @relation(fields: [userId], references: [id])
}
